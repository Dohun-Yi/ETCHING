#!/usr/bin/env bash

VERSION="ETCHING_v1.2.1 (released 2021.1.20.)"

#--------------------------------------------------------------------
# Copyright 2020. Bioinformatic and Genomics Lab.
# Hanyang University, Seoul, Korea
# Coded by Jang-il Sohn (sohnjangil@gmail.com)
#--------------------------------------------------------------------  

MODEL_VERSION="1.2.0"

#############################
#
# Help message
#

#############################
#
# Convert to absolute path if relative path
#

function USAGE {
    echo -e "$VERSION"
    echo -e "Usage: etching [options]"
    echo -e 
    echo -e "[Required]"
    echo -e "Sample (tumor in somatic call)"
    echo -e "-1  (string)\tFirst fastq file of paired-end"
    echo -e "-2  (string)\tSecond fastq file of paired-end. -1 and -2 must be used together."
    echo -e "-b  (string)\tAligned bam file of paired-end. Note! Do not use -b along with -1 or -2."
    echo -e "-g  (string)\tBWA indexed reference genome."
    echo -e
    echo -e "[Options]"
    echo -e "-p  (string)\tPrefix of output [etching]"
    echo -e "-w  (string)\tWorking directory [-p]"
    echo -e "-t  (int)   \tNumber of threads [8]"
    #echo -e "-l  (int)   \tk-mer size (<=32) [31]"
    #echo -e "            \tWarning! Do not use this option, unless you know the details of ETCHING-Filter."
    echo -e "-a  (string)\tAnnotation file in gtf. If you use this option, Fusion-genes will be predicted in a genome level."
    echo -e "-F          \tFast-bam mode for -b option"
    echo -e "-M          \tUsing pre-alignment result for -b option"
    echo -e
    echo -e "Samples"
    #echo -e "-T  (string)\tW for WGS, P for Panel [W]"
    #echo -e "-P  (double)\tTumor purity in somatic call (0-1) [0.75]. Note: Set 1 for germline call."
    echo -e "-K  (int)   \tK-mer frequency cut-off for removing sequencing errors from sample sequencing reads [3]"
    #echo -e "            \tif you want to specify it, we recommand 3-7 for WGS data, and 5-10 for targeted panel sequencing data."
    #echo -e "--max-kmer  (int)   \tExclude the k-mers counted more than this [10000]."
    echo -e "-I  (int)   \tInsert-size [500]"
    #echo -e "-L  (int)   \tRead-length [automatic]"
    echo -e "-O  (string)\tRead-orientation FR or RF. [FR]"
    #echo -e "-D  (int)   \tSequencing depth [automatic for WGS; 500 for panel]"
    #echo -e "            \tNote: This is used only for WGS read filtration, and not affecting on SV calling or scoring."
    echo -e
    echo -e "Control sample (matched normal in somatic call)"
    echo -e "-1c (string)\tFirst fastq file of paried-end"
    echo -e "-2c (string)\tSecond fastq file of paried-end. -1c and -2c must be used together."
    echo -e "-bc (string)\tAligned bam file of paried-end"
    echo -e "--kmer-table (string)\tUsing already made k-mer table ignoring -1/2/bc options"
    echo -e 
    echo -e "K-mer database"
    echo -e "-f  (string)\tPrefix of KMC3 k-mer database"
    echo -e "            \tuse \"-f /path/to/PGK\" for /path/to/PGK.kmc_pre and /path/to/PGK.kmc_suf"
    echo -e 
    #echo -e "Initial SV call"
    echo -e "-A          \tUse all split-reads"
    echo -e "            \tThis option increases recall. However, lots of false-positives also can be generated."
    echo -e "            \tUse this option to detect low allele frequency SVs, or for SVs <1000bp."
    #echo -e 
    echo -e "FP SV removing"
    #echo -e "-R          \tRandom Forest in scoring [default]"
    #echo -e "-X          \tXGBoost in scoring"
    echo -e "-C  (double)\tCut-off of false SVs [0.4]"
    echo -e "-m  (string)\tPath to ETCHING machine learning model"
    echo -e 
    echo -e "Others"
    echo -e "-S  (string)\t/path/to/samtools"
    echo -e "-B  (string)\t/path/to/bwa"
    echo -e "-E          \tStore k-mer database files"
    echo -e 
    echo -e "About ETCHING"
    echo -e "-h          \tPrint this message"
    echo -e "-v          \tPrint version"
    echo -e "--example   \tShow examples"
    echo -e 
    echo -e "[Contact]"
    echo -e "Please report bugs to"
    echo -e "\tJang-il Sohn (sohnjangil@gmail.com)"
    echo -e "\tJin-Wu Nam (jwnam@hanyang.ac.kr)"
    echo -e
}

function EXAMPLE {
    echo -e "ETCHING examples)"
    echo -e 
    echo -e "Fastq input files: tumor_1/2.fq, normal_1/2.fq"
    echo -e "Pre-made PGK (kmc database file): PGK.kmc_pre, PGK.kmc_suf"
    echo -e "Thread 30"
    echo -e "\$ etching -1 tumor_1.fq -2 tumor_2.fq -1c normal_1.fq -2c normal_2.fq -f PGK -p OUTPUT_prefix -t 30"
    echo -e 
    echo -e "Bam input files"
    echo -e "\$ etching -b tumor.bam -F -bc normal.bam -f PGK -p OUTPUT_prefix -t 30"
    echo -e
    echo -e "You can use a bam file for tumor sample"
    echo -e "\$ etching -b tumor.bam 1c normal_1.fq -2c normal_2.fq -p OUTPUT_prefix -t 30"
    echo -e
    echo -e "You can use a bam file for normal sample"
    echo -e "\$ etching -1 tumor_1.fq -2 tumor_2.fq -bc normal.bam -p OUTPUT_prefix -t 30"
    echo -e
    echo -e "If you want to use pre-made k-mer table (31-mer only), use --kmer-table option"
    echo -e "\$ etching -1 tumor_1.fq -2 tumor_2.fq -p OUTPUT_prefix -t 30 --kmer-table tumor_specific_kmer_table.txt"
    echo -e 
    echo -e "k-mer table must be like:"
    echo -e "AACCTAACCTAACCTAACCTAACCTAACCTG 14"
    echo -e "AACCTAACCTAACCTAACCTAACCTAACCAA 12"
    echo -e "AACCTAACCTAACCTAACCTAACCTAACCAC 4"
    echo -e 
    echo -e "[Contact]"
    echo -e "Please report bugs to"
    echo -e "\tJang-il Sohn (sohnjangil@gmail.com)"
    echo -e "\tJin-Wu Nam (jwnam@hanyang.ac.kr)"
    echo -e
}

#####################################

if [ $# -lt 1 ]
then
    USAGE
    exit -1
fi

PREDIR=$PWD

FIRST=
SECOND=
BAM=
GENOME=

PREFIX=etching
THREADS=8
KL=31
WORKDIR=

ANNOTATION=
FAST_BAM=

DATATYPE=W
PURITY=0.75
KMERCUTOFF=3
MAXK=10000
INSERTSIZE=500
READLENGTH=
ORIENT=FR

FIRST_CONT=
SECOND_CONT=
BAM_CONT=
FILTER=

KMER_TABLE=

ALLSPLIT=
DEPTH=

ALGOR=
ALGOR_R=0
ALGOR_X=0
CUTOFF=0.4
ML_PATH=

MAPPER=
SAMTOOLS=
STORE_KMC=

while [ ${#1} != 0 ]; do
    case $1 in
        -1 | --first )  shift
            FIRST=$1
            ;;
        -2 | --second )  shift
            SECOND=$1
            ;;
        -b | --bam )  shift
            BAM=$1
            ;;
        -g | --genome )  shift
            GENOME=$1
            ;;


        -p | --prefix )  shift
            PREFIX=$1
            ;;
        -w | --work-dir )  shift
            WORKDIR=$1
            ;;
        -t | --threads ) shift
	    THREADS=$1
            ;;
        #-l | --k-mer-size ) shift
	#    KL=$1
        #-l    ;;


        -a | --annotation ) shift
	    ANNOTATION=$1
            ;;

        -M )
	    KEEP_ALIGNMENT="-M"
            ;;
        -F | --fastq-bam )
	    FAST_BAM="-F"
            ;;


        -T | --data_type ) shift
	    DATATYPE=$1
            ;;
        -P | --purity ) shift
	    PURITY=$1
            ;;
        -K | --kmer_cutoff ) shift
	    KMERCUTOFF=$1
            ;;
        --max-kmer ) shift
	    MAXK=$1
            ;;
        -I | --insert ) shift
	    INSERTSIZE=$1
            ;;
        #-L | --read_length ) shift
	#    READLENGTH=$1
        #    ;;
        -O | --orientation ) shift
	    ORIENT=$1
            ;;
        -D | --sequencing_depth ) shift
	    DEPTH="-D "$1
            ;;


        -1c | --first )  shift
            FIRST_CONT=$1
            ;;
        -2c | --second )  shift
            SECOND_CONT=$1
            ;;
        -bc | --bam )  shift
            BAM_CONT=$1
            ;;
	-f | --k-mer-database ) shift
	    FILTER=$1
	    ;;
	--kmer-table ) shift
	    KMER_TABLE=$1
	    ;;


        -A | --all_split )
	    ALLSPLIT="-A"
            ;;


        -R | --random_forest )
	    ALGOR_R=1
            ;;
        -X | --xgboost )
	    ALGOR_X=1
            ;;
        -C | --cutoff ) shift
	    CUTOFF=$1
            ;;
        -m | --path_to_machine_learning_model ) shift
	    ML_PATH=$1
            ;;

        -S | --samtools ) shift
	    SAMTOOLS=$1
            ;;
        -B | --bwa ) shift
	    MAPPER=$1
            ;;
        -E ) 
	    STORE_KMC="-E"
            ;;

        -h | --help ) USAGE
            exit 0
            ;;

        --example ) EXAMPLE
            exit 0
            ;;


        -v | --version ) 
	    echo -e $VERSION
	    echo -e "ML model version: ${MODEL_VERSION}"
            exit
            ;;

	* ) 
	    echo "ERROR!!! Unavailable option: $1"
	    echo "-------------------------------"
	    USAGE
	    exit -1
	    ;;
    esac
    shift
done


#############################
#
# example
#




#############################
#
# ETCHING starts here
#

echo "[ETCHING START]"
DATE="[$(date)]"
echo ${DATE}

#############################
#
# Checking required options
#

if [ ${#FIRST} != 0 ] && [ ${#SECOND} != 0 ]
then
    if [ ! -f ${FIRST} ]
    then
	echo "ERROR!!! Ther is no ${FIRST}".
	exit -1
    fi

    if [ ! -f ${SECOND} ]
    then
        echo "ERROR!!! Ther is no ${SECOND}".
	exit -1
    fi

    if [ ${#BAM} != 0 ]
    then
	echo "ERROR!!! Do not use -1, -2 and -b at a same time."
	exit -1
    fi

    if [ ${#KEEP_ALIGNMENT} != 0 ]
    then
	echo "ERROR!!! Do not use -M with -1 and -2 options."
	exit -1
    fi

    if [ ${#FAST_BAM} != 0 ]
    then
	echo "ERROR!!! Do not use -F with -1 and -2 options."
	exit -1
    fi
else
    if [ ${#BAM} != 0 ]
    then
	if [ ! -f ${BAM} ]
	then
            echo "ERROR!!! Ther is no ${BAM}".
	    exit -1
	fi
    else
        echo "ERROR!!! Please check required option"
        echo "-------------------------------------"
        USAGE
        exit -1
    fi
fi


#############################
#
# CHECKING REFERENCE GENOME
#
if [ ${#GENOME} == 0 ]
then
    echo "ERROR!!! -g (reference_genome) is required"
    echo "------------------------------------------"
    USAGE
    exit -1
fi

if [ ! -f ${GENOME} ]
then
    echo "ERROR!!! There is no reference genome: $GENOME"
    echo "----------------------------------------------"
    USAGE
    exit -1
fi



#############################
#
# CHECKING ANNOTATION
#

if [ ${#ANNOTATION} != 0 ]
then
    if [ ! -f ${ANNOTATION} ]
    then
	echo "ERROR!!!"
	echo "There is no annotation file: ${ANNOTATION}"
	exit -1
    fi
fi



#############################
#
# Setting sequencing data type
#
if [ ! ${DATATYPE} == "W" ] && [ ! ${DATATYPE} == "P" ]
then
    echo "ERROR!!! -T must be used with W or P."
    echo "---------------------------"
    USAGE
    exit -1
fi


#############################
#
# CHECK ORIENTATION
#
if [ "$ORIENT" != "FR" ] && [ "$ORIENT" != "RF" ]
then
    echo "ERROR!!!"
    echo "-O must be FR or RF"
    exit -1
fi 



#############################
#
# Checking control sample options
#

if [ ${#FIRST_CONT} != 0 ]
then
    if [ ! -f ${FIRST_CONT} ]
    then
	echo "ERROR!!! Ther is no ${FIRST_CONT}".
	exit -1
    fi
fi

if [ ${#SECOND_CONT} != 0 ]
then
    if [ ! -f ${SECOND_CONT} ]
    then
	echo "ERROR!!! Ther is no ${SECOND_CONT}".
	exit -1
    fi
fi


if [ ${#BAM_CONT} != 0 ]
then
    if [ ! -f ${BAM_CONT} ]
    then
        echo "ERROR!!! Ther is no ${BAM_CONT}".
	exit -1
    fi
fi

FILTER_PRE=${FILTER}.kmc_pre
FILTER_SUF=${FILTER}.kmc_suf

if [ ${#FILTER} != 0 ]
then
    if [ ! -f ${FILTER_PRE} ] || [ ! -f ${FILTER_SUF} ]
    then
        echo "ERROR!!! Ther is no ${FILTER}".
	exit -1
    fi
fi



#############################
# 
# Setting algorithm parameter
#
if [ ${ALGOR_R} == 1 ] && [ ${ALGOR_X} == 1 ]
then
    echo "ERROR!!! -R and -X can not used together."
    echo "-----------------------------------------"
    USAGE
    exit -1
fi

# Setting default algorithm
if [ ${ALGOR_R} == 0 ] && [ ${ALGOR_X} == 0 ]
then
    ALGOR_R=1
 fi

if [ ${ALGOR_R} == 1 ]
then 
    ALGOR="-R"
fi

if [ ${ALGOR_X} == 1 ]
then 
    ALGOR="-X"
fi


#############################
#
# Convert to absolute path if relative path
#


DIR=$(echo $0 | sed 's/etching$//g')
cd $DIR
PATH=$PWD:$PATH
cd - > /dev/null

PRESENT_PATH=$PWD


#############################
# 
# Check machine learning paths and files
#

ETCHING_ML_PATH=$DIR/ETCHING_ML_model

#if [ ${#ETCHING_ML_PATH} == 0 ] && [ ${#ML_PATH} == 0 ]
#then
#    echo "ERROR!!!"
#    echo "You need to set -m /path/to/etching/ML_model"
#    exit -1
#fi

if [ ${#ML_PATH} != 0 ]
then
    cd ${ML_PATH}
    ML_PATH=$PWD
    cd $PRESENT_PATH
else
    ML_PATH=$ETCHING_ML_PATH
fi
cd $ML_PATH
ML_PATH=$PWD
cd - > /dev/null

TMP="rf_${MODEL_VERSION}"
if [ $ALGOR == "-X" ]
then
    TMP="xgb"
fi


for i in {1..10}
do
    if [ ! -f ${ML_PATH}/etching_${TMP}_${i}.sav ]
    then
	if [ -f ${ML_PATH}/etching_${TMP}_${i}.sav.gz ]
	then
	    gzip -dc ${ML_PATH}/etching_${TMP}_${i}.sav.gz > ${ML_PATH}/etching_${TMP}_${i}.sav
	else
	    echo "ERROR!!!"
	    echo "No model files in ${CHECK_PATH}"
	    echo "-------------------------------"
	    exit -1
	fi
    fi
done


#############################
#
# CHECKING REQUIRED PROGRAMS
#
for i in cut_by_score estimate_coverage etching etching_caller etching_fg_identifier etching_filter etching_sorter etching_typer fastq_check kmc kmc_dump kmc_tools kmer_filter match_pair read_collector read_length_calc scorer_RandomForest scorer_XGBoost sort_fastq_mem_eff
do
    CHECK=$(which ${i})
    
    if [ ${#CHECK} == 0 ]
    then
	echo "ERROR!!! We cannot find ${i}. Please check PATH."
	echo "."
	exit -1
    fi

done



#############################
#
# CHECKING REQUIRED LD_LIBRARY_PATH
#
for i in etching_caller etching_sorter etching_fg_identifier read_collector read_length_calc fastq_check
do
    CHECK=$(${i} 2> library_check.txt)
    CHECK=$(cat library_check.txt)
    if [ ${#CHECK} != 0 ]
    then
	cat library_check.txt
	echo "Please check LD_LIBRARY_PATH"
	exit -1
    fi
done


for i in kmc kmc_tools kmc_dump
do
    CHECK=$(which ${i})
    
    if [ ${#CHECK} == 0 ]
    then
	echo "ERROR!!!"
	echo "KMC3 was not install properly."
	exit -1
    fi
done


if [ ${#MAPPER} == 0 ]
then
    CHECK=$(which bwa)
else
    CHECK=$(which ${MAPPER})
fi

if [ ${#CHECK} == 0 ]
then
    echo "ERROR!!!"
    echo "bwa was not found"
    exit -1
fi


if [ ${#SAMTOOLS} == 0 ]
then
    CHECK=$(which samtools)
else
    CHECK=$(which $SAMTOOLS)
fi

if [ ${#CHECK} == 0 ]
then
    echo "ERROR!!!"
    echo "samtools was not installed"
    exit -1
fi

#######################################################################################
#
# check working directory
#

if [ ${#WORKDIR} == 0 ]
then
    WORKDIR=${PREFIX}
fi

if [ ! -d ${WORKDIR} ]
then
    cmd="mkdir ${WORKDIR}"
    echo $cmd
    eval $cmd
fi

cd $WORKDIR
WORKDIR=$PWD
cd - > /dev/null


cmd="cd $WORKDIR"
echo $cmd
eval $cmd


if [ ${#FIRST} != 0 ] 
then
    FC=$(echo $FIRST | head -c 1 )
    if [ $FC == "/" ]
    then
	ln -s $FIRST
    else
	ln -s ${PRESENT_PATH}/$FIRST
    fi
    FIRST=$(echo $FIRST | awk -F "/" '{print $NF}')
fi

if [ ${#FIRST_CONT} != 0 ] 
then
    FC=$(echo $FIRST_CONT | head -c 1 )
    if [ $FC == "/" ]
    then
	ln -s $FIRST_CONT
    else
	ln -s ${PRESENT_PATH}/$FIRST_CONT
    fi
    FIRST_CONT=$(echo $FIRST_CONT | awk -F "/" '{print $NF}')
fi


if [ ${#SECOND} != 0 ] 
then
    FC=$(echo $SECOND | head -c 1 )
    if [ $FC == "/" ]
    then
	ln -s $SECOND
    else
	ln -s ${PRESENT_PATH}/$SECOND
    fi
    SECOND=$(echo $SECOND | awk -F "/" '{print $NF}')
fi


if [ ${#SECOND_CONT} != 0 ] 
then
    FC=$(echo $SECOND_CONT | head -c 1 )
    if [ $FC == "/" ]
    then
	ln -s $SECOND_CONT
    else
	ln -s ${PRESENT_PATH}/$SECOND_CONT
    fi
    SECOND_CONT=$(echo $SECOND_CONT | awk -F "/" '{print $NF}')
fi


if [ ${#BAM} != 0 ] 
then
    FC=$(echo $BAM | head -c 1 )
    if [ $FC == "/" ]
    then
	ln -s $BAM
    else
	ln -s ${PRESENT_PATH}/$BAM
    fi
    BAM=$(echo $BAM | awk -F "/" '{print $NF}')
fi


if [ ${#BAM_CONT} != 0 ] 
then
    FC=$(echo $BAM_CONT | head -c 1 )
    if [ $FC == "/" ]
    then
	ln -s $BAM_CONT
    else
	ln -s ${PRESENT_PATH}/$BAM_CONT
    fi
    BAM_CONT=$(echo $BAM_CONT | awk -F "/" '{print $NF}')
fi
    
if [ ${#FILTER_PRE} != 0 ] 
then
    FC=$(echo $FILTER_PRE | head -c 1 )
    if [ $FC == "/" ]
    then
	ln -s $FILTER_PRE
    else
	ln -s ${PRESENT_PATH}/$FILTER_PRE
    fi
fi


if [ ${#FILTER_SUF} != 0 ] 
then
    FC=$(echo $FILTER_SUF | head -c 1 )
    if [ $FC == "/" ]
    then
	ln -s $FILTER_SUF
    else
	ln -s ${PRESENT_PATH}/$FILTER_SUF
    fi
fi
FILTER=$(echo $FILTER | awk -F "/" '{print $NF}')


if [ ${#ANNOTATION} != 0 ] 
then
    FC=$(echo $ANNOTATION | head -c 1 )
    if [ $FC == "/" ]
    then
	ln -s $ANNOTATION
    else
	ln -s ${PRESENT_PATH}/$ANNOTATION
    fi
    ANNOTATION=$(echo $ANNOTATION | awk -F "/" '{print $NF}')
fi


if [ ${GENOME} != 0 ]
then
    FC=$(echo $GENOME | head -c 1 )
    if [ $FC != "/" ]
    then
	GENOME="${PRESENT_PATH}/${GENOME}"
    fi
fi


if [ ${#KMER_TABLE} != 0 ]
then
    FC=$(echo $KMER_TABLE | head -c 1 )
    if [ $FC == "/" ]
    then
        ln -s $KMER_TABLE
    else
        ln -s ${PRESENT_PATH}/$KMER_TABLE
    fi
    KMER_TABLE=$(echo $KMER_TABLE | awk -F "/" '{print $NF}')
fi


#######################################################################################


#############################
#
# ETCHING FILTER
#

echo 
echo "[FILTER]"
DATE="[$(date)]";echo ${DATE}

mkdir logs

REQUIRED=
#echo $FIRST
#echo $SECOND

if [ ${#FIRST} != 0 ] && [ ${#SECOND} != 0 ]
then
    REQUIRED="-1 $FIRST -2 $SECOND -g ${GENOME}"
    #echo $REQUIRED
else
    REQUIRED="-b $BAM -g ${GENOME}"
fi

OPTIONS=

if [ ${PREFIX} != 8 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -p $PREFIX"
    else
	OPTIONS="-p $PREFIX"
    fi
fi

if [ ${THREADS} != 8 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -t $THREADS"
    else
	OPTIONS="-t $THREADS"
    fi
fi

if [ ${KL} != 31 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -l $KL"
    else
	OPTIONS="-l $KL"
    fi
fi

if [ ${DATATYPE} != "W" ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -T ${DATATYPE}"
    else
	OPTIONS="-T $DATATYPE"
    fi
fi

if [ ${#KMERCUTOFF} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -K $KMERCUTOFF"
    else
	OPTIONS="-K $KMERCUTOFF"
    fi
fi

if [ ${#MAXK} != 10000 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} --max-kmer $MAXK"
    else
	OPTIONS="--max-kmer $MAXK"
    fi
fi


if [ ${#FIRST_CONT} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -1c ${FIRST_CONT}"
    else
	OPTIONS="-1c ${FIRST_CONT}"
    fi
fi

if [ ${#SECOND_CONT} != 0 ]
    then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -2c ${SECOND_CONT}"
    else
	OPTIONS="-2c ${SECOND_CONT}"
    fi
fi

if [ ${#BAM_CONT} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -bc ${BAM_CONT}"
    else
	OPTIONS="-bc ${BAM_CONT}"
    fi
fi

if [ ${#FILTER} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -f ${FILTER}"
    else
	OPTIONS="-f ${FILTER}"
    fi
fi

if [ ${#SAMTOOLS} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -S ${SAMTOOLS}"
    else
	OPTIONS="-S ${SAMTOOLS}"
    fi
fi

if [ ${#MAPPER} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -B ${MAPPER}"
    else
	OPTIONS="-B ${MAPPER}"
    fi
fi

if [ ${#KMER_TABLE} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} --kmer-table ${KMER_TABLE}"
    else
	OPTIONS="--kmer-table ${KMER_TABLE}"
    fi
fi

if [ ${#STORE_KMC} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -E"
    else
	OPTIONS="-E"
    fi
fi

if [ ${#KEEP_ALIGNMENT} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -M"
    else
	OPTIONS="-M"
    fi
fi

if [ ${#FAST_BAM} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -F"
    else
	OPTIONS="-F"
    fi
fi

cmd="etching_filter ${REQUIRED} ${OPTIONS} > logs/ETCHING_FILTER.log"
echo $cmd
eval $cmd 2> /dev/null

#######################################################################################################################

#############################
#
# CALLER
#

echo
echo "[CALLER]"
DATE="[$(date)]";echo ${DATE}


if [ ${#READLENGTH} == 0 ]
then
    if [ ${#FIRST} != 0 ]
    then
	INPUT=$FIRST
    else 
	if [ ${#BAM} != 0 ]
	then
	    INPUT=$BAM
	fi
    fi
    cmd="read_length_calc $INPUT 100000"
    echo $cmd
    READLENGTH=$(eval $cmd)
    echo "Read length: $READLENGTH"
fi


if [ ${#DEPTH} == 0 ]
then
    if [ $DATATYPE == "W" ]
    then 
	if [ -d sample.hist ]
	then
	    cmd="estimate_coverage sample.hist $READLENGTH $KL"
	    echo $cmd
	    DEPTH=$(eval $cmd)
	else
	    DEPTH=50
	fi
	
	DEPTH="-D $DEPTH"
    else
	DEPTH="-D 500"
    fi
fi

cmd="etching_caller -b ${PREFIX}.sort.bam -g $GENOME -o $PREFIX $DEPTH -I $INSERTSIZE -P $PURITY -O $ORIENT $ALLSPLIT > logs/ETCHING_CALLER.log "
echo $cmd
eval $cmd


######################################################################################################################
#
# SORTER
#
echo
echo "[SORTER]"
DATE="[$(date)]";echo ${DATE}

cmd="etching_sorter -i ${PREFIX}.SV.vcf -o ${PREFIX}.SV -c $CUTOFF -m ${ML_PATH} $ALGOR > logs/ETCHING_SORTER.SV.log"
echo $cmd
eval $cmd &

cmd="etching_sorter -i ${PREFIX}.BND.vcf -o ${PREFIX}.BND -c $CUTOFF -m ${ML_PATH} $ALGOR > logs/ETCHING_SORTER.BND.log"
echo $cmd
eval $cmd &

wait

#######################################################################################################################
#
# FG_IDENTIFIER
#

if [ ${#ANNOTATION} != 0 ]
then
    echo
    echo "[FG_IDENTIFIER]"
    DATE="[$(date)]";echo ${DATE}
    
    cmd="etching_fg_identifier ${PREFIX}.BND.etching_sorter.vcf $ANNOTATION > ${PREFIX}.BND.fusion_gene.txt"
    echo $cmd
    eval $cmd &

    cmd="etching_fg_identifier ${PREFIX}.SV.etching_sorter.vcf $ANNOTATION > ${PREFIX}.SV.fusion_gene.txt"
    echo $cmd
    eval $cmd &
    
    wait
fi

cmd="cd -"
echo $cmd
eval $cmd

#######################################################################################################################
#############################
#
# COPY RESULTS
#

echo
echo "[RESULTS]"

cmd="cp ${WORKDIR}/${PREFIX}.BND.unfiltered.vcf ${WORKDIR}/${PREFIX}.SV.unfiltered.vcf ${WORKDIR}/${PREFIX}.BND.etching_sorter.vcf ${WORKDIR}/${PREFIX}.SV.etching_sorter.vcf ./"
echo $cmd
eval $cmd
if [ -f ${WORKDIR}/${PREFIX}.BND.fusion_gene.txt ]
then
    cmd="cp ${WORKDIR}/${PREFIX}.BND.fusion_gene.txt ./"
    echo $cmd
    eval $cmd
fi

if [ -f ${WORKDIR}/${PREFIX}.SV.fusion_gene.txt ]
then
    cmd="cp ${WORKDIR}/${PREFIX}.SV.fusion_gene.txt ./"
    echo $cmd
    eval $cmd
fi
echo


echo "[Final results]"
echo "${PREFIX}.BND.unfiltered.vcf"
echo "${PREFIX}.SV.unfiltered.vcf"
echo "${PREFIX}.BND.etching_sorter.vcf"
echo "${PREFIX}.SV.etching_sorter.vcf"

if [ -f ${PREFIX}.BND.fusion_gene.txt ]
then
    echo "${PREFIX}.BND.fusion_gene.txt"
fi

if [ -f ${PREFIX}.SV.fusion_gene.txt ]
then
    echo "${PREFIX}.SV.fusion_gene.txt"
fi
echo

echo "[Finished]"
DATE="[$(date)]";echo ${DATE}
