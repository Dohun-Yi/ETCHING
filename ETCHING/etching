#!/usr/bin/env bash

VERSION="ETCHING_v1.3.3 (released 2021.7.15.)"
MODEL_VERSION="1.3.0"

#--------------------------------------------------------------------
# Copyright 2020. Bioinformatic and Genomics Lab.
# Hanyang University, Seoul, Korea
# Coded by Jang-il Sohn (sohnjangil@gmail.com)
#--------------------------------------------------------------------  

#############################
#
# Help message
#

DEFA_STRAND_AWARE=1
DEFA_FUSION_WINDOW=10000

function USAGE {
    echo -e "$VERSION"
    echo -e "Usage: etching [options]"
    echo -e 
    echo -e "[Required]"
    echo -e "Sample (tumor in somatic call)"
    echo -e "-1  (string)\tFirst fastq file of paired-end"
    echo -e "-2  (string)\tSecond fastq file of paired-end. -1 and -2 must be used together."
    echo -e "-b  (string)\tAligned bam file of paired-end. Note! Do not use -b along with -1 or -2."
    echo -e "-g  (string)\tBWA indexed reference genome."
    echo -e
    echo -e "[Options]"
    echo -e "-o  (string)\tPrefix of output (-p is same) [etching]"
    echo -e "-w  (string)\tWorking directory [-o]"
    echo -e "-t  (int)   \tNumber of threads [8]"
    echo -e
    echo -e "Samples"
    echo -e "-K  (int)   \tK-mer frequency cut-off for removing sequencing errors from sample sequencing reads [5]"
    echo -e "            \tSet to 3 for low allele frequency SVs especially for subclonal evolution."
    echo -e "-O  (string)\tRead-orientation FR or RF. [FR]"
    echo -e
    echo -e "Control sample (matched normal in somatic call)"
    echo -e "-1c (string)\tFirst fastq file of paried-end"
    echo -e "-2c (string)\tSecond fastq file of paried-end. -1c and -2c must be used together."
    echo -e "-bc (string)\tAligned bam file of paried-end"
    echo -e "--bam2fastq \tConvert bam to fastq for bam input. This may take more running-time."
    echo -e "            \tNOTE: Do not use this if you want to keep pre-aligned bam."
    echo -e "-F          \tFast-bam mode for -b option. Only clipped reads are used."
    echo -e 
    echo -e "K-mer database"
    echo -e "-f  (string)\tPrefix of KMC3 k-mer database"
    echo -e "            \tuse \"-f /path/to/PGK\" for /path/to/PGK.kmc_pre and /path/to/PGK.kmc_suf"
    echo -e "--kmer-table (string)"
    echo -e "            \tUsing already made k-mer table ignoring -1/2/bc options"
    echo -e "--no-filter \tSkip etching_filter, and use all sequencing data. This requires sorted BAM files with -b option."
    echo -e 
    echo -e "FP SV removing"
    echo -e "-R          \tRandom Forest in scoring [default]"
    echo -e "-X          \tXGBoost in scoring"
    echo -e "-C  (double)\tCut-off of false SVs [0.4]"
    echo -e "-m  (string)\tPath to ETCHING machine learning model"
    echo -e "--remove-miscall (1 or 0) \tRemove germline SV near as somatic SNV or indels [1 for yes]"
    echo -e "                          \tNOTE: -1c/2c/bc options are required, else skip."
    echo -e 
    echo -e "Fusion-gene prediction"
    echo -e "-a  (string)\tAnnotation file in gtf. Use this option to predict fusion-genes on a genome level."
    echo -e "--strand-aware\tPredict FGs connecting nearest genes to BP-pairs awaring strand"
    echo -e "              \t[Default: NONE (all possible gene-pairs both sides of each BP-pair)]"
    echo -e "--fusion-window (int)\tWindow size for fusion-gene prediction [${DEFA_FUSION_WINDOW}]"
    echo -e 
    echo -e "Others"
    echo -e "-S  (string)\t/path/to/samtools"
    echo -e "-B  (string)\t/path/to/bwa"
    echo -e "-E          \tStore k-mer database files. [Default: NONE (remove k-mer DB files to save storage)]"
    echo -e 
    echo -e "About ETCHING"
    echo -e "-h          \tPrint this message"
    echo -e "-v          \tPrint version"
    echo -e "--example   \tShow examples"
    echo -e 
    echo -e "[Contact]"
    echo -e "Please report bugs to"
    echo -e "\tJang-il Sohn (sohnjangil@gmail.com)"
    echo -e "\tJin-Wu Nam (jwnam@hanyang.ac.kr)"
    echo -e
}

function EXAMPLE {
    echo -e "ETCHING examples for DEMO"
    echo -e 
    echo -e "\$ wget http://big.hanyang.ac.kr/ETCHING/DEMO.tar.gz"
    echo -e "\$ tar zxvf DEMO.tar.gz"
    echo -e "\$ cd DEMO"
    echo -e "\$ etching -1 tumor_1.fq -2 tumor_2.fq -1c normal_1.fq -2c normal_2.fq \\"
    echo -e "  -g small_genome.fa -a small_genome.gtf -f demo_PGK -o example_1 -t 8"
    echo -e 
    echo -e "----------------------------------------------------------------------------------------------------------"
    echo -e 
    echo -e "Bam input files"
    echo -e "\$ etching -b tumor.sort.bam -bc normal.sort.bam \\"
    echo -e "  -g small_genome.fa -a small_genome.gtf -f demo_PGK -o example_1 -t 8"
    echo -e
    echo -e "You can use a bam file for tumor sample"
    echo -e "\$ etching -b tumor.sort.bam -1c normal_1.fq -2c normal_2.fq \\"
    echo -e "  -g small_genome.fa -a small_genome.gtf -f demo_PGK -o example_2 -t 8"
    echo -e
    echo -e "You can use a bam file for normal sample"
    echo -e "\$ etching -1 tumor_1.fq -2 tumor_2.fq -bc normal.sort.bam \\"
    echo -e "  -g small_genome.fa -a small_genome.gtf -f demo_PGK -o example_3 -t 8"
    echo -e
    echo -e "----------------------------------------------------------------------------------------------------------"
    echo -e 
    echo -e "If you want to use pre-made k-mer table (31-mer only), use --kmer-table option"
    echo -e "\$ etching -1 tumor_1.fq -2 tumor_2.fq --kmer-table tumor_specific_kmer_table.txt"
    echo -e "  -g small_genome.fa -a small_genome.gtf -f demo_PGK -o example_4 -t 8"
    echo -e 
    echo -e "k-mer table must be like:"
    echo -e "AACCTAACCTAACCTAACCTAACCTAACCTG 14"
    echo -e "AACCTAACCTAACCTAACCTAACCTAACCAA 12"
    echo -e "AACCTAACCTAACCTAACCTAACCTAACCAC 6"
    echo -e 
    echo -e "----------------------------------------------------------------------------------------------------------"
    echo -e 
    echo -e "[Contact]"
    echo -e "Please report bugs to"
    echo -e "  Jang-il Sohn (sohnjangil@gmail.com)"
    echo -e "  Jin-Wu Nam (jwnam@hanyang.ac.kr)"
    echo -e
}

function ABS_PATH (){
    INPUT=$1
    if [ ${#INPUT} != 0 ] 
    then
	INPUT_DIR=$(ls ${INPUT} | awk -F "/" 'NF{NF-=1};1' | sed 's/ /\//g')
	if [ ${#INPUT_DIR} != 0 ]
	then
	    cd ${INPUT_DIR}
	    INPUT_DIR=$PWD
	    cd - > /dev/null
	    INPUT_FILE=$(ls ${INPUT} | rev | cut -d'/' -f 1 | rev)
	    INPUT=${INPUT_DIR}/${INPUT_FILE}
	else
	    INPUT=$PWD/$INPUT
	fi
    fi
    echo $INPUT
}



#####################################

if [ $# -lt 1 ]
then
    USAGE
    exit 0
fi

PREDIR=$PWD

FIRST=
SECOND=
BAM=
GENOME=

PREFIX=etching
THREADS=8
KL=31
WORKDIR=

ANNOTATION=
FAST_BAM=

DATATYPE=W
PURITY=0.75
KMERCUTOFF=5
MAXK=10000
INSERTSIZE=500
READLENGTH=
ORIENT=FR

FIRST_CONT=
SECOND_CONT=
BAM_CONT=
FILTER=

KMER_TABLE=

ALLSPLIT="-A"

ALGOR=
ALGOR_R=0
ALGOR_X=0
CUTOFF=0.4
ML_PATH=

MAPPER=
SAMTOOLS=
STORE_KMC=

REMOVE_MISCALL=1
KEEP_ALIGNMENT=

NO_FILTER=0

STRAND_AWARE=DEFA_STRAND_AWARE
FUSION_WINDOW=DEFA_FUSION_WINDOW

while [ ${#1} != 0 ]; do
    case $1 in
        -1 | --first )  shift
            FIRST=$1
            ;;
        -2 | --second )  shift
            SECOND=$1
            ;;
        -b | --bam )  shift
            BAM=$1
            ;;
        -g | --genome )  shift
            GENOME=$1
            ;;


        -p | --prefix )  shift
            PREFIX=$1
            ;;
        -o | --output )  shift
            PREFIX=$1
            ;;
        -w | --work-dir )  shift
            WORKDIR=$1
            ;;
        -t | --threads ) shift
	    THREADS=$1
            ;;


	--bam2fastq )
	    KEEP_ALIGNMENT="--bam2fastq"
	    ;;
        -M )
	    KEEP_ALIGNMENT=
            ;;
        -F | --fastq-bam )
	    FAST_BAM="-F"
	    KEEP_ALIGNMENT=
            ;;


        -T | --data_type ) shift
	    DATATYPE=$1
            ;;
        -P | --purity ) shift
	    PURITY=$1
            ;;
        -K | --kmer_cutoff ) shift
	    KMERCUTOFF=$1
            ;;
        --max-kmer ) shift
	    MAXK=$1
            ;;
        -I | --insert ) shift
	    INSERTSIZE=$1
            ;;
        -O | --orientation ) shift
	    ORIENT=$1
            ;;

        -1c | --first )  shift
            FIRST_CONT=$1
            ;;
        -2c | --second )  shift
            SECOND_CONT=$1
            ;;
        -bc | --bam )  shift
            BAM_CONT=$1
            ;;
	-f | --k-mer-database ) shift
	    FILTER=$1
	    ;;
	--kmer-table ) shift
	    KMER_TABLE=$1
	    ;;
	--no-filter )
	    NO_FILTER=1
	    ;;



        -A | --all-split )
	    ALLSPLIT="-A"
            ;;


        -R | --random_forest )
	    ALGOR_R=1
            ;;
        -X | --xgboost )
	    ALGOR_X=1
            ;;
        -C | --cutoff ) shift
	    CUTOFF=$1
            ;;
        -m | --path-to-machine-learning-model ) shift
	    ML_PATH=$1
            ;;

        -S | --samtools ) shift
	    SAMTOOLS=$1
            ;;
        -B | --bwa ) shift
	    MAPPER=$1
            ;;
        -E ) 
	    STORE_KMC="-E"
            ;;
	--remove-miscall ) shift
	REMOVE_MISCALL=$1
	;;



        -a | --annotation ) shift
	    ANNOTATION=$1
            ;;
	--strand-aware )
	    STRAND_AWARE=1
	    ;;
        --fusion-window ) shift
	    FUSION_WINDOW=$1
            ;;
	
	
        -h | --help ) USAGE
            exit 0
            ;;

        --example ) EXAMPLE
            exit 0
            ;;


        -v | --version ) 
	    echo -e $VERSION
	    echo -e "ML model version: ${MODEL_VERSION}"
            exit
            ;;

	* ) 
	    echo "ERROR!!! Unavailable option: $1"
	    echo "-------------------------------"
	    USAGE
	    exit 1
	    ;;
    esac
    shift
done



#############################
#
# ETCHING starts here
#

echo "[ETCHING START]"
DATE="[$(date)]"
echo ${DATE}

#############################
#
# Checking required options
#

if [ ${#FIRST} != 0 ] && [ ${#SECOND} != 0 ]
then
    if [ ! -f ${FIRST} ]
    then
	echo "ERROR!!! Ther is no ${FIRST}".
	exit 2
    fi

    if [ ! -f ${SECOND} ]
    then
        echo "ERROR!!! Ther is no ${SECOND}".
	exit 3
    fi

    if [ ${#BAM} != 0 ]
    then
	echo "ERROR!!! Do not use -1, -2 and -b at a same time."
	exit 4
    fi

    if [ ${#KEEP_ALIGNMENT} != 0 ]
    then
	echo "ERROR!!! Do not use -M with -1 and -2 options."
	exit 5
    fi

    if [ ${#FAST_BAM} != 0 ]
    then
	echo "ERROR!!! Do not use -F with -1 and -2 options."
	exit 6
    fi
else
    if [ ${#BAM} != 0 ]
    then
	if [ ! -f ${BAM} ]
	then
            echo "ERROR!!! Ther is no ${BAM}".
	    exit 7
	fi
    else
        echo "ERROR!!! Please check required option"
        echo "-------------------------------------"
        USAGE
        exit 8
    fi
fi


#############################
#
# CHECKING REFERENCE GENOME
#
if [ ${#GENOME} == 0 ]
then
    echo "ERROR!!! -g (reference_genome) is required"
    echo "------------------------------------------"
    USAGE
    exit 9
fi

if [ ! -f ${GENOME} ]
then
    echo "ERROR!!! There is no reference genome: $GENOME"
    echo "----------------------------------------------"
    USAGE
    exit 10
fi



#############################
#
# CHECKING ANNOTATION
#

if [ ${#ANNOTATION} != 0 ]
then
    if [ ! -f ${ANNOTATION} ]
    then
	echo "ERROR!!!"
	echo "There is no annotation file: ${ANNOTATION}"
	exit 11
    fi
fi



#############################
#
# Setting sequencing data type
#
if [ ! ${DATATYPE} == "W" ] && [ ! ${DATATYPE} == "P" ]
then
    echo "ERROR!!! -T must be used with W or P."
    echo "---------------------------"
    USAGE
    exit 12
fi


#############################
#
# CHECK ORIENTATION
#
if [ "$ORIENT" != "FR" ] && [ "$ORIENT" != "RF" ]
then
    echo "ERROR!!!"
    echo "-O must be FR or RF"
    exit 13
fi 



#############################
#
# Checking control sample options
#

if [ ${#FIRST_CONT} != 0 ]
then
    if [ ! -f ${FIRST_CONT} ]
    then
	echo "ERROR!!! Ther is no ${FIRST_CONT}".
	exit 14
    fi
fi

if [ ${#SECOND_CONT} != 0 ]
then
    if [ ! -f ${SECOND_CONT} ]
    then
	echo "ERROR!!! Ther is no ${SECOND_CONT}".
	exit 15
    fi
fi


if [ ${#BAM_CONT} != 0 ]
then
    if [ ! -f ${BAM_CONT} ]
    then
        echo "ERROR!!! Ther is no ${BAM_CONT}".
	exit 16
    fi
fi




#############################
# 
# Setting algorithm parameter
#
if [ ${ALGOR_R} == 1 ] && [ ${ALGOR_X} == 1 ]
then
    echo "ERROR!!! -R and -X can not used together."
    echo "-----------------------------------------"
    USAGE
    exit 17
fi

# Setting default algorithm
if [ ${ALGOR_R} == 0 ] && [ ${ALGOR_X} == 0 ]
then
    ALGOR_R=1
 fi

if [ ${ALGOR_R} == 1 ]
then 
    ALGOR="-R"
fi

if [ ${ALGOR_X} == 1 ]
then 
    ALGOR="-X"
fi


#############################
#
# Convert to absolute path if relative path
#


DIR=$(echo $0 | sed 's/etching$//g')
cd $DIR
PATH=$PWD:$PATH
DIR=$PWD
cd - > /dev/null

PRESENT_PATH=$PWD


#############################
# 
# Check machine learning paths and files
#

ETCHING_ML_PATH=$DIR/ETCHING_ML_model


if [ ${#ML_PATH} != 0 ]
then
    cd ${ML_PATH}
    ML_PATH=$PWD
    cd - > /dev/null
else
    ML_PATH=${DIR}/ETCHING_ML_model
fi

cd $ML_PATH
ML_PATH=$PWD
cd - > /dev/null

if [ $ALGOR == "-R" ]
then
    TMP="rf_${MODEL_VERSION}"
fi

if [ $ALGOR == "-X" ]
then
    TMP="xgb_${MODEL_VERSION}"
fi

ML_PREFIX=etching_${TMP}

for i in {1..10}
do
    if [ ! -f ${ML_PATH}/etching_${TMP}_${i}.sav ]
    then
	if [ -f ${ML_PATH}/etching_${TMP}_${i}.sav.gz ]
	then
	    gzip -dc ${ML_PATH}/etching_${TMP}_${i}.sav.gz > ${ML_PATH}/etching_${TMP}_${i}.sav
	else
	    echo "ERROR!!!"
	    echo "No model files in ${ML_PATH}"
	    echo "-------------------------------"
	    exit 18
	fi
    fi
done


#############################
#
# CHECKING REQUIRED PROGRAMS
#
for i in extract_BP_read somatic_filter cut_by_score etching etching_caller etching_fg_identifier etching_filter etching_sorter etching_typer fastq_check kmc kmc_dump kmc_tools kmer_filter match_pair read_collector read_length_calc scorer_RandomForest scorer_XGBoost sort_fastq_mem_eff somatic_filter
do
    CHECK=$(which ${i})
    
    if [ ${#CHECK} == 0 ]
    then
	echo "ERROR!!! We cannot find ${i}. Please check PATH."
	echo "."
	exit 19
    fi

done



#############################
#
# CHECKING REQUIRED LD_LIBRARY_PATH
#
for i in etching_caller etching_sorter etching_fg_identifier read_collector read_length_calc fastq_check
do
    CHECK=$(${i} 2> library_check.txt)
    CHECK=$(cat library_check.txt)
    if [ ${#CHECK} != 0 ]
    then
	cat library_check.txt
	echo "Please check LD_LIBRARY_PATH"
	exit 20
    fi
done


for i in kmc kmc_tools kmc_dump
do
    CHECK=$(which ${i})
    
    if [ ${#CHECK} == 0 ]
    then
	echo "ERROR!!!"
	echo "KMC3 was not install properly."
	exit 21
    fi
done


if [ ${#MAPPER} == 0 ]
then
    CHECK=$(which bwa)
else
    CHECK=$(which ${MAPPER})
fi

if [ ${#CHECK} == 0 ]
then
    echo "ERROR!!!"
    echo "bwa was not found"
    exit 22
else
    MAPPER=$CHECK
fi


if [ ${#SAMTOOLS} == 0 ]
then
    CHECK=$(which samtools)
else
    CHECK=$(which $SAMTOOLS)
fi

if [ ${#CHECK} == 0 ]
then
    echo "ERROR!!!"
    echo "samtools was not installed"
    exit 23
else
    SAMTOOLS=$CHECK
fi


#######################################################################################
#
# make path absolute
#

first=$FIRST
second=$SECOND
bam=$BAM

FIRST=$(ABS_PATH $FIRST)
SECOND=$(ABS_PATH $SECOND)
BAM=$(ABS_PATH $BAM)

first_cont=$FIRST_CONT
second_cont=$SECOND_CONT
bam_cont=$BAM_CONT

FIRST_CONT=$(ABS_PATH $FIRST_CONT)
SECOND_CONT=$(ABS_PATH $SECOND_CONT)
BAM_CONT=$(ABS_PATH $BAM_CONT)

FILTER_PRE=${FILTER}.kmc_pre
FILTER_SUF=${FILTER}.kmc_suf

FILTER_PRE=$(ABS_PATH $FILTER_PRE)
FILTER_SUF=$(ABS_PATH $FILTER_SUF)

filter=$FILTER
FILTER=$(ls ${FILTER_PRE} | sed 's/.kmc_pre$//1')

if [[ $((${#first_cont} + ${#second_cont} + ${#bam_cont} + ${#FILTER})) -eq 0 ]]
then 
    NO_FILTER=1
fi

annotation=$ANNOTATION
ANNOTATION=$(ABS_PATH ${ANNOTATION})

GENOME=$(ABS_PATH ${GENOME})

kmer_table=$KMER_TABLE
KMER_TABLE=$(ABS_PATH ${KMER_TABLE})


#######################################################################################
#
# check working directory
#

if [ ${#WORKDIR} == 0 ]
then
    WORKDIR=${PREFIX}
fi

cmd="mkdir -p ${WORKDIR}"
echo $cmd
eval $cmd

STATUS=$(echo $?)
if (( STATUS != 0 ))
then
    echo "Failed: ${STATUS}: $cmd"
    exit 1001
fi

cd $WORKDIR
WORKDIR=$PWD
cd - > /dev/null


cmd="cd $WORKDIR"
echo $cmd
eval $cmd

STATUS=$(echo $?)
if (( STATUS != 0 ))
then
    echo "Failed: ${STATUS}: $cmd"
    exit 1002
fi


#######################################################################################


#############################
#
# ETCHING FILTER
#

echo 
echo "[FILTER]"
DATE="[$(date)]";echo ${DATE}

cmd="mkdir -p logs"
echo $cmd
eval $cmd

STATUS=$(echo $?)
if (( STATUS != 0 ))
then
    echo "Failed: ${STATUS}: $cmd"
    exit 1003
fi


REQUIRED=
#echo $FIRST
#echo $SECOND

if [ ${#first} != 0 ] && [ ${#second} != 0 ]
then
    REQUIRED="-1 $FIRST -2 $SECOND -g ${GENOME}"
else
    REQUIRED="-b $BAM -g ${GENOME}"
fi

OPTIONS=

if [[ ${PREFIX} != "etching" ]]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -p $PREFIX"
    else
	OPTIONS="-p $PREFIX"
    fi
fi

if [ ${THREADS} != 8 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -t $THREADS"
    else
	OPTIONS="-t $THREADS"
    fi
fi

if [ ${KL} != 31 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -l $KL"
    else
	OPTIONS="-l $KL"
    fi
fi

if [ ${#KMERCUTOFF} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -K $KMERCUTOFF"
    else
	OPTIONS="-K $KMERCUTOFF"
    fi
fi

if [ ${#MAXK} != 10000 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} --max-kmer $MAXK"
    else
	OPTIONS="--max-kmer $MAXK"
    fi
fi


if [ ${#first_cont} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -1c ${FIRST_CONT}"
    else
	OPTIONS="-1c ${FIRST_CONT}"
    fi
fi

if [ ${#second_cont} != 0 ]
    then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -2c ${SECOND_CONT}"
    else
	OPTIONS="-2c ${SECOND_CONT}"
    fi
fi

if [ ${#bam_cont} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -bc ${BAM_CONT}"
    else
	OPTIONS="-bc ${BAM_CONT}"
    fi
fi

if [ ${#filter} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -f ${FILTER}"
    else
	OPTIONS="-f ${FILTER}"
    fi
fi

if [ ${#SAMTOOLS} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -S ${SAMTOOLS}"
    else
	OPTIONS="-S ${SAMTOOLS}"
    fi
fi

if [ ${#MAPPER} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -B ${MAPPER}"
    else
	OPTIONS="-B ${MAPPER}"
    fi
fi

if [ ${#kmer_table} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} --kmer-table ${KMER_TABLE}"
    else
	OPTIONS="--kmer-table ${KMER_TABLE}"
    fi
fi

if [ ${#KEEP_ALIGNMENT} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} ${KEEP_ALIGNMENT}"
    else
	OPTIONS="${KEEP_ALIGNMENT}"
    fi
fi

if [ ${#FAST_BAM} != 0 ]
then
    if [ ${#OPTIONS} != 0 ]
    then
	OPTIONS="${OPTIONS} -F"
    else
	OPTIONS="-F"
    fi
fi


# Run etching_filter

if [[ ${NO_FILTER} -eq 0 ]]
then 
    cmd="etching_filter ${REQUIRED} ${OPTIONS} > logs/ETCHING_FILTER.log"
    echo $cmd
    eval $cmd 2> /dev/null
    STATUS=$(echo $?)
    if (( STATUS != 0 ))
    then
	echo "Failed: ${STATUS}: $cmd"
	exit 1004
    fi
    
    
else
    echo "Skipped by --no-filter"
fi

#######################################################################################################################

#############################
#
# CALLER
#

echo
echo "[CALLER]"
DATE="[$(date)]";echo ${DATE}


if [ ${#READLENGTH} == 0 ]
then
    if [ ${#FIRST} != 0 ]
    then
	INPUT=$FIRST
    else 
	if [ ${#bam} != 0 ]
	then
	    INPUT=$BAM
	fi
    fi
    cmd="read_length_calc $INPUT 100000"
    echo $cmd
    READLENGTH=$(eval $cmd)

    STATUS=$(echo $?)
    if (( STATUS != 0 ))
    then
	echo "Failed: ${STATUS}: $cmd"
	exit 1005
    fi
    echo "Read length: $READLENGTH"
fi


if [[ ${NO_FILTER} -eq 0 ]]
then
    cmd="etching_caller -b ${PREFIX}.sort.bam -g $GENOME -o $PREFIX -O $ORIENT > logs/ETCHING_CALLER.log "
    echo $cmd
    eval $cmd

    STATUS=$(echo $?)
    if (( STATUS != 0 ))
    then
	echo "Failed: ${STATUS}: $cmd"
	exit 1006
    fi
else
    if [ ${#bam} != 0 ]
    then
	cmd="etching_caller -b ${BAM} -g $GENOME -o $PREFIX -O $ORIENT > logs/ETCHING_CALLER.log "
	echo $cmd
	eval $cmd

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1007
	fi
    else
	BAM_ALL=${PREFIX}.bam

	cmd="${MAPPER} mem -t ${THREADS} ${GENOME} ${FIRST} ${SECOND} 2> logs/${PREFIX}_bwa_mem.log | ${SAMTOOLS} view -@ ${THREADS} -Sbh - > ${PREFIX}.bam"
	echo $cmd
	eval $cmd


	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1008
	fi

	CHECK=$($SAMTOOLS sort 2>&1 | grep "\-o" | grep "final output to stdout")
	if [ ${#CHECK} == 0 ]
	then
	    cmd="${SAMTOOLS} sort -@ ${THREADS} ${PREFIX}.bam -o ${PREFIX}.sort.bam"
	    echo $cmd
	    eval $cmd

	    STATUS=$(echo $?)
	    if (( STATUS != 0 ))
	    then
		echo "Failed: ${STATUS}: $cmd"
		exit 1009
	    fi

	else
	    cmd="${SAMTOOLS} sort -@ ${THREADS} ${PREFIX}.bam ${PREFIX}.sort"
	    echo $cmd
	    eval $cmd

	    STATUS=$(echo $?)
	    if (( STATUS != 0 ))
	    then
		echo "Failed: ${STATUS}: $cmd"
		exit 1010
	    fi

	fi

	cmd="etching_caller -b ${PREFIX}.sort.bam -g $GENOME -o $PREFIX -O $ORIENT > logs/ETCHING_CALLER.log "
	echo $cmd
	eval $cmd

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1011
	fi

    fi
fi


######################################################################################################################
#
# SORTER
#
echo
echo "[SORTER]"
DATE="[$(date)]";echo ${DATE}

cmd="etching_sorter -i ${PREFIX}.SV.vcf -o ${PREFIX}.SV -c $CUTOFF -m ${ML_PATH} $ALGOR -p ${ML_PREFIX} > logs/ETCHING_SORTER.SV.log"
echo $cmd
eval $cmd 

STATUS=$(echo $?)
if (( STATUS != 0 ))
then
    echo "Failed: ${STATUS}: $cmd"
    exit 1012
fi

cmd="etching_sorter -i ${PREFIX}.BND.vcf -o ${PREFIX}.BND -c $CUTOFF -m ${ML_PATH} $ALGOR -p ${ML_PREFIX} > logs/ETCHING_SORTER.BND.log"
echo $cmd
eval $cmd 

STATUS=$(echo $?)
if (( STATUS != 0 ))
then
    echo "Failed: ${STATUS}: $cmd"
    exit 1013
fi

OUTPUT_1="${PREFIX}.BND.unfiltered.vcf"
OUTPUT_2="${PREFIX}.SV.unfiltered.vcf"
OUTPUT_3="${PREFIX}.BND.etching_sorter.vcf"
OUTPUT_4="${PREFIX}.SV.etching_sorter.vcf"

#######################################################################################################################
#
# Remove miscall
#

CHECK=
if [ ${#FIRST_CONT} != 0 ] && [ ${#SECOND_CONT} != 0 ]
then
    CHECK=1
fi

if [ ${#BAM_CONT} != 0 ]
then
    CHECK=1
fi

if [[ $CHECK -eq 1 ]]
then
    if [ ${REMOVE_MISCALL} -eq 1 ]
    then

	cmd="extract_BP_read ${PREFIX}.BND.etching_sorter.vcf ${PREFIX}.sort.bam ${PREFIX}.BP_reads.fastq 2> logs/${PREFIX}_extract_BP_read.log"
	echo $cmd
	eval $cmd

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1018
	fi

	cmd="mkdir -p tmp_BP_reads_xxx"
	echo $cmd
	eval $cmd

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1019
	fi

	cmd="kmc -t${THREADS} -k31 -v -fq ${PREFIX}.BP_reads.fastq ${PREFIX}.BP_reads tmp_BP_reads_xxx > logs/BP_reads.log 2>&1"
	echo $cmd
	eval $cmd

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1020
	fi

	cmd="rm -r tmp_BP_reads_xxx"
	echo $cmd
	eval $cmd

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1021
	fi

	cmd="kmc_dump -ci5 ${PREFIX}.BP_reads ${PREFIX}.BP_reads.kmer_table.txt"
	echo $cmd
	eval $cmd

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1022
	fi

	#############################################################################################################################################################################
	if [ ${#FIRST_CONT} != 0 ] && [ ${#SECOND_CONT} != 0 ]
	then
	    INPUT="-1 ${FIRST_CONT} -2 ${SECOND_CONT}"
	else 
	    if [ ${#BAM_CONT} != 0 ]
	    then
		INPUT="-b ${BAM_CONT} -F "
	    fi
	fi

	cmd="etching_filter ${INPUT} --kmer-table ${PREFIX}.BP_reads.kmer_table.txt -p ${PREFIX}.BP_reads -t ${THREADS} -g ${GENOME} > logs/remove_miscall_etching_filter.log 2>&1"
	echo $cmd
	eval $cmd

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1023
	fi
	#############################################################################################################################################################################

	cmd="etching_caller -b ${PREFIX}.BP_reads.sort.bam -o ${PREFIX}.miscall -g ${GENOME} -A -B > logs/remove_miscall_etching_caller 2>&1"
	echo $cmd
	eval $cmd

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1026
	fi

	cmd="somatic_filter ${PREFIX}.BND.etching_sorter.vcf ${PREFIX}.miscall.BND.vcf ${PREFIX}.BP_reads.sort.bam > ${PREFIX}.BND.etching_sorter.final.vcf 2> logs/${PREFIX}_somatic_filter_BND.log"
	echo $cmd
	eval $cmd 

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1027
	fi

	cmd="somatic_filter ${PREFIX}.SV.etching_sorter.vcf ${PREFIX}.miscall.BND.vcf ${PREFIX}.BP_reads.sort.bam > ${PREFIX}.SV.etching_sorter.final.vcf 2> logs/${PREFIX}_somatic_filter_SV.log"
	echo $cmd
	eval $cmd 

	STATUS=$(echo $?)
	if (( STATUS != 0 ))
	then
	    echo "Failed: ${STATUS}: $cmd"
	    exit 1028
	fi

	OUTPUT_3="${PREFIX}.BND.etching_sorter.final.vcf"
	OUTPUT_4="${PREFIX}.SV.etching_sorter.final.vcf"

	echo
    fi
fi

#######################################################################################################################
#
# FG_IDENTIFIER
#

if [ ${#annotation} != 0 ]
then

    OPTIONS=

    if [ ${STRAND_AWARE} == ${DEF_STRAND_AWARE} ]
    then
	if [ ${#OPTIONS} != 0 ]
	then
	    OPTIONS="${OPTIONS} --strand-aware"
	else
	    OPTIONS="--strand-aware"
	fi
    fi

    if [ ${FUSION_WINDOW} != ${DEFA_FUSION_WINDOW} ]
    then
	if [ ${#OPTIONS} != 0 ]
	then
	    OPTIONS="${OPTIONS} --fusion-window ${FUSION_WINDOW}"
	else
	    OPTIONS="--fusion-window ${FUSION_WINDOW}"
	fi
    fi


    echo
    echo "[FG_IDENTIFIER]"
    DATE="[$(date)]";echo ${DATE}
    
    cmd="etching_fg_identifier -i ${OUTPUT_3} -a ${ANNOTATION} ${OPTIONS} > ${PREFIX}.BND.fusion_gene.txt"
    echo $cmd
    eval $cmd

    STATUS=$(echo $?)
    if (( STATUS != 0 ))
    then
	echo "Failed: ${STATUS}: $cmd"
	exit 1029
    fi

    cmd="etching_fg_identifier -i ${OUTPUT_4} -a ${ANNOTATION} ${OPTIONS} > ${PREFIX}.SV.fusion_gene.txt"
    echo $cmd
    eval $cmd
    
    STATUS=$(echo $?)
    if (( STATUS != 0 ))
    then
	echo "Failed: ${STATUS}: $cmd"
	exit 1030
    fi

    wait
fi

if [[ ${#STORE_KMC} -eq 0 ]]
then
    echo "[Remove k-mer database to save storage]"
    cmd="rm -f *kmc_pre *kmc_suf"
    echo $cmd
    eval $cmd

    STATUS=$(echo $?)
    if (( STATUS != 0 ))
    then
	echo "Failed: ${STATUS}: $cmd"
	exit 1031
    fi

fi

cmd="cd ${PREDIR}"
echo $cmd
eval $cmd
STATUS=$(echo $?)
if (( STATUS != 0 ))
then
    echo "Failed: ${STATUS}: $cmd"
    exit 1032
fi

#######################################################################################################################
#############################
#
# COPY RESULTS
#

echo
echo "[RESULTS]"

cmd="cp ${WORKDIR}/${OUTPUT_1} ${WORKDIR}/${OUTPUT_2} ${WORKDIR}/${OUTPUT_3} ${WORKDIR}/${OUTPUT_4} ./"
echo $cmd
eval $cmd
STATUS=$(echo $?)
if (( STATUS != 0 ))
then
    echo "Failed: ${STATUS}: $cmd"
    exit 1033
fi


if [ -f ${WORKDIR}/${PREFIX}.BND.fusion_gene.txt ]
then
    cmd="cp ${WORKDIR}/${PREFIX}.BND.fusion_gene.txt ./"
    echo $cmd
    eval $cmd
    STATUS=$(echo $?)
    if (( STATUS != 0 ))
    then
	echo "Failed: ${STATUS}: $cmd"
	exit 1034
    fi

fi

if [ -f ${WORKDIR}/${PREFIX}.SV.fusion_gene.txt ]
then
    cmd="cp ${WORKDIR}/${PREFIX}.SV.fusion_gene.txt ./"
    echo $cmd
    eval $cmd
    STATUS=$(echo $?)
    if (( STATUS != 0 ))
    then
	echo "Failed: ${STATUS}: $cmd"
	exit 1035
    fi

fi
echo

echo "[Final results]"
echo "${OUTPUT_1}"
echo "${OUTPUT_2}"
echo "${OUTPUT_3}"
echo "${OUTPUT_4}"

if [ -f ${PREFIX}.BND.fusion_gene.txt ]
then
    echo "${PREFIX}.BND.fusion_gene.txt"
fi

if [ -f ${PREFIX}.SV.fusion_gene.txt ]
then
    echo "${PREFIX}.SV.fusion_gene.txt"
fi
echo

echo "[Finished]"
DATE="[$(date)]";echo ${DATE}
