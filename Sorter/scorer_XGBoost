#!/usr/bin/env python3

#--------------------------------------------------------------------
# Copyright 2020. Bioinformatic and Genomics Lab.
# Hanyang University, Seoul, Korea
# Coded by A. Vipin Menon (a.vipin.menon@gmail.com)
#-------------------------------------------------------------------- 

import os
import pickle
import sys
import pandas as pd
import numpy as np
from sklearn import metrics

def xgbooster(testfile,prefix,directory):
	test_file = pd.read_csv(testfile,sep="\t")
	test_label = np.array(pd.DataFrame(test_file,columns=['ID']))
	test_ref_file = test_file.drop(columns = ['ID','SVTYPE'])
	test_ref_file_ar = np.array(test_ref_file)
	
	for fnum in range (1,11) :
                fname = directory + 'etching_xgb_' + str(fnum) + '.sav'
                if os.path.exists ( fname ) != True :
                        print ( "ERROR!!! Check model files in path: " + directory )
                        sys.exit()
	
	model_1 = pickle.load(open(str(directory) + 'etching_xgb_1.sav','rb'))
	model_2 = pickle.load(open(str(directory) +'etching_xgb_2.sav','rb'))
	model_3 = pickle.load(open(str(directory) +'etching_xgb_3.sav','rb'))
	model_4 = pickle.load(open(str(directory) +'etching_xgb_4.sav','rb'))
	model_5 = pickle.load(open(str(directory) +'etching_xgb_5.sav','rb'))
	model_6 = pickle.load(open(str(directory) +'etching_xgb_6.sav','rb'))
	model_7 = pickle.load(open(str(directory) +'etching_xgb_7.sav','rb'))
	model_8 = pickle.load(open(str(directory) +'etching_xgb_8.sav','rb'))
	model_9 = pickle.load(open(str(directory) +'etching_xgb_9.sav','rb'))
	model_10 = pickle.load(open(str(directory) +'etching_xgb_10.sav','rb'))

	score_1 = model_1.predict(test_ref_file_ar)
	score_2 = model_2.predict(test_ref_file_ar)
	score_3 = model_3.predict(test_ref_file_ar)
	score_4 = model_4.predict(test_ref_file_ar)
	score_5 = model_5.predict(test_ref_file_ar)
	score_6 = model_6.predict(test_ref_file_ar)
	score_7 = model_7.predict(test_ref_file_ar)
	score_8 = model_8.predict(test_ref_file_ar)
	score_9 = model_9.predict(test_ref_file_ar)
	score_10 = model_10.predict(test_ref_file_ar)
#	new_probs = score_1[:,1]
	
	score_data_1 = pd.DataFrame(score_1.reshape(len(score_1),1))
	score_data_2 = pd.DataFrame(score_2.reshape(len(score_2),1))
	score_data_3 = pd.DataFrame(score_3.reshape(len(score_3),1))
	score_data_4 = pd.DataFrame(score_4.reshape(len(score_4),1))
	score_data_5 = pd.DataFrame(score_5.reshape(len(score_5),1))
	score_data_6 = pd.DataFrame(score_6.reshape(len(score_6),1))
	score_data_7 = pd.DataFrame(score_7.reshape(len(score_7),1))
	score_data_8 = pd.DataFrame(score_8.reshape(len(score_8),1))
	score_data_9 = pd.DataFrame(score_9.reshape(len(score_9),1))
	score_data_10 = pd.DataFrame(score_10.reshape(len(score_10),1))
	
	idss = pd.DataFrame(test_label.reshape(len(test_label),1))
	score_stack = pd.DataFrame(np.column_stack([score_data_1,score_data_2,score_data_3,score_data_4,score_data_5,score_data_6,score_data_7,score_data_8,score_data_9,score_data_10]),columns=["Model_1","Model_2","Model_3","Model_4","Model_5","Model_6","Model_7","Model_8","Model_9","Model_10"])
	score_stack['Score'] = score_stack.mean(axis=1)
	final_score = pd.DataFrame(score_stack,columns=['Score'])
	final_score_stack = pd.DataFrame(np.column_stack([final_score,idss]),columns=["XGBoostScore","ID"])
	
	return (final_score_stack.to_csv(str(prefix),index=False,sep='\t'))


args = sys.argv[1]
prefix = sys.argv[2]

if len(sys.argv)==3:
        directory = os.getcwd() + '/'
else:
        directory = sys.argv[3] + '/'

result = xgbooster(args,prefix,directory)
print ( result )
	
	
